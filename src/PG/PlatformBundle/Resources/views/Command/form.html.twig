{% trans_default_domain 'FOSUserBundle' %}

{{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}
<div class="well">
    {{ form_errors(form) }}

    <table style="width: 100%" id="products-list" class="products-list"
           data-prototype="{{ form_widget(form.products.vars.prototype)|e('html_attr') }}">
        <tr>
            <th>Produit</th>
            <th>Quantité</th>
        </tr>
    </table>

    {{ form_widget(form.submit, {'attr': {'class': 'btn btn-primary'}, 'label': 'pg.validate'|trans}) }}
</div>
{{ form_end(form) }}

{# On charge la bibliothèque jQuery. #}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<script type="text/javascript">
    var $prototypeHolder;
    var $tableRef;

    jQuery(document).ready(function () {
        // Get the table that holds the collection of products
        $prototypeHolder = $('table.products-list');
        $tableRef = document.getElementById('products-list').getElementsByTagName('tbody')[0];

        displayInventory();
    });

    function displayInventory() {
        {% for product in products %}
        addProductCommandForm($tableRef, $prototypeHolder, {{ product.getId() }}, '{{ product.getName() }}');
        {% endfor %}
    }

    function addProductCommandForm($tableRef, $prototypeHolder, $id, $productName) {

        var newProductForm = buildNewProductForm($prototypeHolder, $id);

        // Insert a row in the table at the last row
        var newRow = $tableRef.insertRow($tableRef.rows.length);

        // Insert a cell in the row at index 0
        var cellProductLabel = newRow.insertCell(0);

        var divProductLabel = document.createElement("div");
        var productLabel = document.createTextNode($productName);
        divProductLabel.appendChild(productLabel);
        cellProductLabel.appendChild(divProductLabel);

        var cellProductQuantity = newRow.insertCell(1);
        var divProductQuantity = document.createElement("div");
        divProductQuantity.innerHTML = newProductForm;
        cellProductQuantity.appendChild(divProductQuantity);
    }

    function buildNewProductForm($prototypeHolder, id) {
        // Get the data-prototype explained earlier
        var newForm = $prototypeHolder.attr('data-prototype');

        // You need this only if you didn't set 'label' => false in your tags field in TaskType
        // Replace '__name__label__' in the prototype's HTML to
        // instead be a number based on how many items we have
        newForm = newForm.replace(/__name__/g, id);
        //.replace(/__name__label__/g, 'Quant' + index)
        // Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have

        return newForm;
    }
</script>